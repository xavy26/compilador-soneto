
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 22 21:22:46 ECT 2022
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.Symbol;
import analizadorSintactico.utiles.Utiles;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 22 21:22:46 ECT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\006\000\002\004\005\000\002\004\006" +
    "\000\002\007\005\000\002\007\006\000\002\007\007\000" +
    "\002\007\006\000\002\007\005\000\002\007\006\000\002" +
    "\007\007\000\002\007\006\000\002\007\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\004\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\013\001\002\000\006\005\012\010\011\001" +
    "\002\000\004\006\013\001\002\000\004\002\000\001\002" +
    "\000\010\012\017\014\021\021\020\001\002\000\006\006" +
    "\015\011\016\001\002\000\010\012\017\014\021\021\020" +
    "\001\002\000\006\005\ufffe\010\ufffe\001\002\000\004\021" +
    "\020\001\002\000\026\007\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\046\001" +
    "\002\000\004\021\020\001\002\000\004\007\042\001\002" +
    "\000\010\007\ufff3\012\032\014\033\001\002\000\024\007" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\030\017\027" +
    "\020\025\021\026\001\002\000\014\007\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\001\002\000\026\007\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\031\001\002\000\014\007\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\001\002\000\014\007\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\001\002\000\024\007\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\001\002\000\004\021\020\001\002\000\004\021\020" +
    "\001\002\000\004\015\035\001\002\000\006\007\ufffa\021" +
    "\020\001\002\000\004\007\ufff9\001\002\000\004\013\040" +
    "\001\002\000\006\007\ufff6\021\020\001\002\000\004\007" +
    "\ufff5\001\002\000\006\006\ufffc\011\ufffc\001\002\000\004" +
    "\015\044\001\002\000\006\007\ufffb\021\020\001\002\000" +
    "\004\007\ufff8\001\002\000\024\007\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\001" +
    "\002\000\004\013\050\001\002\000\006\007\ufff7\021\020" +
    "\001\002\000\004\007\ufff4\001\002\000\004\007\053\001" +
    "\002\000\006\006\ufffd\011\ufffd\001\002\000\006\006\015" +
    "\011\055\001\002\000\006\005\uffff\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\053" +
    "\001\001\000\002\001\001\000\004\004\013\001\001\000" +
    "\002\001\001\000\010\005\023\006\022\007\051\001\001" +
    "\000\002\001\001\000\010\005\023\006\022\007\021\001" +
    "\001\000\002\001\001\000\006\005\023\006\046\001\001" +
    "\000\002\001\001\000\006\005\023\006\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\023\006\036\001\001" +
    "\000\006\005\023\006\033\001\001\000\002\001\001\000" +
    "\006\005\023\006\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\023\006\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\023" +
    "\006\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\023\006\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error (Symbol s){
        this.s = s;

    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


   
    private Integer line_counter =0;       //***********************************
    private Integer parraf_counter =0;
 

    private String lineaCad ="";  

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PALABRAS ::= PALABRAS Cadena_texto Numero 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    if (cad!=null){
        lineaCad = lineaCad +cad+" "; 
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PALABRAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PALABRAS ::= PALABRAS Cadena_texto 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (cad!=null){
        lineaCad = lineaCad +cad+" "; 
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PALABRAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PALABRAS ::= Cadena_texto Numero 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    if (cad!=null){
        lineaCad = lineaCad +cad+"" ; 
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PALABRAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PALABRAS ::= Cadena_texto 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (cad!=null){
        lineaCad = lineaCad +cad+" "; 
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PALABRAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FRASE ::= PALABRAS Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FRASE ::= PALABRAS Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FRASE ::= PALABRAS Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FRASE ::= PALABRAS 
            {
              Object RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRASE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEA ::= FRASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEA ::= Exclamacion_i FRASE Exclamacion_f FRASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEA ::= FRASE Exclamacion_i FRASE Exclamacion_f FRASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEA ::= FRASE Exclamacion_i FRASE Exclamacion_f 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEA ::= Exclamacion_i FRASE Exclamacion_f 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEA ::= Interrogacion_i FRASE Interrogacion_f FRASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEA ::= FRASE Interrogacion_i FRASE Interrogacion_f FRASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINEA ::= FRASE Interrogacion_i FRASE Interrogacion_f 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINEA ::= Interrogacion_i FRASE Interrogacion_f 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINEA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VERSO ::= VERSO Verso_i LINEA Verso_f 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lineavleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lineavright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lineav = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    line_counter ++;

    Utiles.getVerso(lineaCad, line_counter);

    lineaCad=""; 

    if (lineav!=null) {
           System.out.println("error"+line_counter); 
    }
    
    //Utiles.guardarLinea(lineaV.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERSO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VERSO ::= Verso_i LINEA Verso_f 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    line_counter ++;
    Utiles.getVerso(lineaCad, line_counter);
    
    lineaCad=""; //reinicio linea

    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERSO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PARRAFO ::= PARRAFO Parrafo_i VERSO Parrafo_f 
            {
              Object RESULT =null;
		
    parraf_counter++;

    Utiles.checkVersoIndividual(parraf_counter, line_counter) ;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARRAFO ::= Parrafo_i VERSO Parrafo_f 
            {
              Object RESULT =null;
		
    parraf_counter++;
    
    Utiles.checkVersoIndividual(parraf_counter, line_counter) ;

    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARRAFO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Poema_i PARRAFO Poema_f 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int parrleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int parrright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object parr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utiles.checkVersoParrafo(line_counter, parraf_counter);
   
    Utiles.compararRimas();
        

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

